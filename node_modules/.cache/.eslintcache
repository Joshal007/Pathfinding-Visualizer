[{"D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\index.js":"1","D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\App.jsx":"2","D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\context\\context.jsx":"3","D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\utils\\startinggrid.js":"4","D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\components\\Grid\\Grid.jsx":"5","D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\components\\Navbar\\Navbar.jsx":"6"},{"size":332,"mtime":1692725697145,"results":"7","hashOfConfig":"8"},{"size":282,"mtime":1692729995080,"results":"9","hashOfConfig":"8"},{"size":1073,"mtime":1692985991040,"results":"10","hashOfConfig":"8"},{"size":391,"mtime":1692725697323,"results":"11","hashOfConfig":"8"},{"size":7336,"mtime":1692990787115,"results":"12","hashOfConfig":"8"},{"size":2048,"mtime":1692986039102,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vpp72y",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\index.js",[],[],"D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\App.jsx",[],[],"D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\context\\context.jsx",[],[],"D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\utils\\startinggrid.js",[],[],"D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\components\\Grid\\Grid.jsx",["34","35","36","37","38","39","40","41","42","43","44","45","46"],[],"import React, { useEffect, useRef } from 'react'\r\nimport { useState  } from 'react'\r\nimport { getGrid } from '../../utils/startinggrid'\r\nimport './grid.css'\r\nimport { useParams } from '../../context/context'\r\n\r\nfunction getrefarray(grid) {\r\n  let array = [];\r\n  grid.forEach((elem) => {\r\n    elem.forEach((child) => {\r\n      array.push(useRef());\r\n    });\r\n  });\r\n  return array;\r\n}\r\n\r\nexport default function Grid() {\r\n\r\n  const {grid,setgrid,editing,seteditFlag,mode,start,end,run,res,algo}  = useParams()\r\n\r\n  //const [refarray,mm]=useState(getrefarray(grid))\r\n  \r\n  const refarray = getrefarray(grid);\r\n\r\n  function BFS(graph,hashmap,prevmap,start,target){\r\n    let queue=[start]\r\n    let count=0\r\n    hashmap[`${start.x}-${start.y}`]=true\r\n    while (queue.length > 0){\r\n      count+=1\r\n      let c=queue.pop()\r\n      refarray[c.x+c.y*50].current.style['transition-delay']=`${count * 8}ms`\r\n      refarray[c.x+c.y*50].current.classList.add('visited')\r\n      if (c.x == target.x && c.y == target.y) return [c,count]\r\n \r\n      if(c.x+1 < 50 && !hashmap[`${c.x+1}-${c.y}`] && !graph[c.y][c.x+1].iswall){\r\n        queue.unshift({x:c.x +1,y:c.y})\r\n        prevmap[`${c.x+1}-${c.y}`]={...c}\r\n        hashmap[`${c.x+1}-${c.y}`]=true\r\n      }\r\n      if(c.x-1 >=0 && !hashmap[`${c.x-1}-${c.y}`] && !graph[c.y][c.x-1].iswall){\r\n        queue.unshift({x:c.x -1,y:c.y})\r\n        prevmap[`${c.x-1}-${c.y}`]={...c}\r\n        hashmap[`${c.x-1}-${c.y}`]=true\r\n      }\r\n      if(c.y+1 < 25 && !hashmap[`${c.x}-${c.y+1}`] && !graph[c.y+1][c.x].iswall){\r\n        queue.unshift({x:c.x ,y:c.y+1})\r\n        prevmap[`${c.x}-${c.y+1}`]={...c}\r\n        hashmap[`${c.x}-${c.y+1}`]=true\r\n      }\r\n      if(c.y-1 >=0 && !hashmap[`${c.x}-${c.y-1}`] && !graph[c.y-1][c.x].iswall){\r\n        queue.unshift({x:c.x ,y:c.y-1})\r\n        prevmap[`${c.x}-${c.y-1}`]={...c}\r\n        hashmap[`${c.x}-${c.y-1}`]=true\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  function BDS(graph,hashmap,prevmap,start,target){\r\n    let queue=[start]\r\n    let count=0\r\n    hashmap[`${start.x}-${start.y}`]=true\r\n    while (queue.length > 0){\r\n      count+=1\r\n      let c=queue[0]\r\n      queue.shift()\r\n      refarray[c.x+c.y*50].current.style['transition-delay']=`${count * 8}ms`\r\n      refarray[c.x+c.y*50].current.classList.add('visited')\r\n      if (c.x == target.x && c.y == target.y) return [c,count]\r\n \r\n      \r\n      \r\n      if(c.y+1 < 25 && !hashmap[`${c.x}-${c.y+1}`] && !graph[c.y+1][c.x].iswall){\r\n        queue.unshift({x:c.x ,y:c.y+1})\r\n        prevmap[`${c.x}-${c.y+1}`]={...c}\r\n        hashmap[`${c.x}-${c.y+1}`]=true\r\n      }\r\n      if(c.x-1 >=0 && !hashmap[`${c.x-1}-${c.y}`] && !graph[c.y][c.x-1].iswall){\r\n        queue.unshift({x:c.x -1,y:c.y})\r\n        prevmap[`${c.x-1}-${c.y}`]={...c}\r\n        hashmap[`${c.x-1}-${c.y}`]=true\r\n      }\r\n      if(c.y-1 >=0 && !hashmap[`${c.x}-${c.y-1}`] && !graph[c.y-1][c.x].iswall){\r\n        queue.unshift({x:c.x ,y:c.y-1})\r\n        prevmap[`${c.x}-${c.y-1}`]={...c}\r\n        hashmap[`${c.x}-${c.y-1}`]=true\r\n      }\r\n      if(c.x+1 < 50 && !hashmap[`${c.x+1}-${c.y}`] && !graph[c.y][c.x+1].iswall){\r\n        queue.unshift({x:c.x +1,y:c.y})\r\n        prevmap[`${c.x+1}-${c.y}`]={...c}\r\n        hashmap[`${c.x+1}-${c.y}`]=true\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\nuseEffect(()=>{\r\n\r\nif (algo == 'BFS'){\r\n  let hashmap={}\r\n  let prevmap={}\r\n  for (let j=0;j<25;j++){\r\n   for (let i=0;i<50;i++){\r\n     hashmap[`${i}-${j}`]=false\r\n     prevmap[`${i}-${j}`]=null\r\n   }\r\n }\r\n let result=BFS(grid,hashmap,prevmap,start.current,end.current)\r\n let path=[]\r\n if (result !=null){\r\n  let current=result[0]\r\n  while (prevmap[`${current.x}-${current.y}`] != null){\r\n    path.push(current)\r\n    current=prevmap[`${current.x}-${current.y}`]\r\n  }\r\n  setTimeout(()=>{path.reverse().forEach((elem,index)=>{\r\n    refarray[elem.x+elem.y*50].current.style['transition-delay']=`${( index) * 15}ms`\r\n      refarray[elem.x+elem.y*50].current.classList.add('path')\r\n  })},result[1]*9)\r\n  \r\n }\r\n  \r\n \r\n}\r\nif (algo == 'BDS'){\r\n  let hashmap={}\r\n  let prevmap={}\r\n  for (let j=0;j<25;j++){\r\n   for (let i=0;i<50;i++){\r\n     hashmap[`${i}-${j}`]=false\r\n     prevmap[`${i}-${j}`]=null\r\n   }\r\n }\r\n  let result=BDS(grid,hashmap,prevmap,start.current,end.current)\r\n  let path=[]\r\n  if (result !=null){\r\n   let current=result[0]\r\n   while (prevmap[`${current.x}-${current.y}`] != null){\r\n     path.push(current)\r\n     current=prevmap[`${current.x}-${current.y}`]\r\n   }\r\n   setTimeout(()=>{path.reverse().forEach((elem,index)=>{\r\n     refarray[elem.x+elem.y*50].current.style['transition-delay']=`${( index) * 15}ms`\r\n       refarray[elem.x+elem.y*50].current.classList.add('path')\r\n   })},result[1]*9)\r\n   \r\n  }\r\n   \r\n  \r\n }\r\n },[run])\r\n\r\n useEffect(()=>{\r\n  refarray.forEach((elem)=>{elem.current.style['transition-delay']='0ms'})\r\n  refarray.forEach((elem)=>{elem.current.classList.remove('visited');elem.current.classList.remove('path')})\r\n },[res])\r\n\r\n  return (\r\n    <div className='board'>\r\n      {refarray.map((elem,index)=> {\r\n        let classList=['cell']\r\n\r\n        let yindex=Math.floor(index/50)\r\n        let xindex=index % 50\r\n        let cell=grid[yindex][xindex]\r\n\r\n        if (cell.iswall) {\r\n          classList.push('wall')\r\n        }\r\n        \r\n        return <div key={`${index}`} ref={elem}  className={classList.join(' ')} \r\n        onMouseDown={()=>{seteditFlag(true)}} onMouseUp={()=>{seteditFlag(false)}}\r\n        onMouseMove={()=>{\r\n          if (!editing) return\r\n          const current= grid[yindex][xindex]\r\n           if (current.isstart || current.istarget ) return\r\n           switch(mode){\r\n            case 'setstart':\r\n              var newgrid=grid.map((elem)=>{\r\n              return elem.map((elem)=>{\r\n                if (!elem.isstart) return elem\r\n                return {...elem,isstart:false}\r\n              }) \r\n             })\r\n             newgrid[yindex][xindex]={...newgrid[yindex][xindex],isstart:true,istarget:false,weight:1,iswall:false}\r\n             start.current={x:xindex,y:yindex}\r\n             setgrid(newgrid)\r\n             break;\r\n\r\n           case 'settarget':\r\n                var newgrid=grid.map((elem)=>{\r\n                return elem.map((elem)=>{\r\n                  if (!elem.istarget) return elem\r\n                  return {...elem,istarget:false}\r\n                }) \r\n               })\r\n               newgrid[yindex][xindex]={...newgrid[yindex][xindex],isstart:false,istarget:true,weight:1,iswall:false}\r\n               end.current={x:xindex,y:yindex}\r\n               setgrid(newgrid)\r\n               break;\r\n\r\n             case 'addbricks':\r\n                var newgrid=grid.slice()\r\n               newgrid[yindex][xindex]={...newgrid[yindex][xindex],weight:1,iswall:true}\r\n               setgrid(newgrid)\r\n               break;\r\n\r\n            case 'addweight':\r\n                var newgrid=grid.slice()\r\n               newgrid[yindex][xindex]={...newgrid[yindex][xindex],weight:5,iswall:false}\r\n               setgrid(newgrid)\r\n               break;\r\n           default:\r\n             return \r\n            }}}>\r\n         \r\n\r\n          {cell.weight > 1 ? <i className=\"bi bi-virus\"></i> : null}\r\n          {cell.isstart ? <i className=\"bi bi-geo-alt\"></i> : null }\r\n          {cell.istarget ? <i className=\"bi bi-geo\"></i> : null }\r\n          \r\n         </div>\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\n","D:\\Algo-visualizer-main\\Algo-visualizer-main\\src\\components\\Navbar\\Navbar.jsx",["47","48","49","50","51","52","53"],[],"import React, { useState } from 'react'\r\nimport './Navbar.css'\r\nimport { useParams } from '../../context/context'\r\n\r\n\r\nexport default function Navbar() {\r\n  const {mode,setmode,algo,setalgo,setres,setrun}=useParams()\r\n  \r\n  return (\r\n    <div className='navbar'>\r\n      <div className='container'>\r\n       <button type=\"button\" className={['btn' ,'btn-primary', mode=='setstart'? 'selected' : ''].join(' ')} onClick={()=>{\r\n        if(mode == 'setstart') setmode(null)\r\n        else {setmode('setstart')}\r\n       }}>\r\n        {/* <i className=\"bi bi-geo-alt\"></i> */}\r\n        Select Source\r\n       </button>\r\n       <button type=\"button\" className={['btn' ,'btn-primary', mode=='settarget'? 'selected' : ''].join(' ')} onClick={()=>{\r\n        if(mode == 'settarget') setmode(null)\r\n        else {setmode('settarget')}\r\n       }}>\r\n       {/* <i className=\"bi bi-geo\"></i> */}\r\n       Select Destination\r\n       </button>\r\n       <button type=\"button\" className={['btn' ,'btn-primary', mode=='addbricks'? 'selected' : ''].join(' ')} onClick={()=>{\r\n        if(mode == 'addbricks') setmode(null)\r\n        else {setmode('addbricks')}\r\n       }}>\r\n       {/* <i className=\"bi bi-bricks\"></i> */}\r\n       Add Walls\r\n       </button>\r\n       <button type=\"button\" className=\"btn btn-primary\" onClick={()=>{setres((old)=>{ return !old})}}>\r\n       {/* <i className=\"bi bi-arrow-counterclockwise\"></i>  */}\r\n       Reset Grid\r\n       </button>\r\n       <button type=\"button\" className=\"btn btn-primary\" onClick={()=>{setrun((old)=>{return !old})}}>\r\n       {/* <i className=\"bi bi-caret-right\"></i>  */}\r\n       Visualize\r\n       </button>\r\n       <div>\r\n       <select className=\"form-select\" aria-label=\"Default select example\"  value={algo} onChange={(e)=>{\r\n        setalgo(e.target.value)\r\n       }}>\r\n       <option value=''>Choose your algorithm</option>\r\n       <option value=\"dijkstra\">Dijkstra</option>\r\n       <option value=\"BDS\">DFS</option>\r\n       <option value=\"BFS\">BFS</option>\r\n</select>\r\n       </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",{"ruleId":"54","severity":1,"message":"55","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":18},{"ruleId":"54","severity":1,"message":"58","line":3,"column":10,"nodeType":"56","messageId":"57","endLine":3,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":34,"column":15,"nodeType":"61","messageId":"62","endLine":34,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":34,"column":34,"nodeType":"61","messageId":"62","endLine":34,"endColumn":36},{"ruleId":"59","severity":1,"message":"60","line":70,"column":15,"nodeType":"61","messageId":"62","endLine":70,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":70,"column":34,"nodeType":"61","messageId":"62","endLine":70,"endColumn":36},{"ruleId":"59","severity":1,"message":"60","line":100,"column":10,"nodeType":"61","messageId":"62","endLine":100,"endColumn":12},{"ruleId":"59","severity":1,"message":"60","line":126,"column":10,"nodeType":"61","messageId":"62","endLine":126,"endColumn":12},{"ruleId":"63","severity":1,"message":"64","line":152,"column":4,"nodeType":"65","endLine":152,"endColumn":9,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":157,"column":4,"nodeType":"65","endLine":157,"endColumn":9,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":192,"column":21,"nodeType":"56","messageId":"71","endLine":192,"endColumn":28},{"ruleId":"69","severity":1,"message":"70","line":204,"column":21,"nodeType":"56","messageId":"71","endLine":204,"endColumn":28},{"ruleId":"69","severity":1,"message":"70","line":210,"column":21,"nodeType":"56","messageId":"71","endLine":210,"endColumn":28},{"ruleId":"54","severity":1,"message":"55","line":1,"column":17,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"60","line":12,"column":68,"nodeType":"61","messageId":"62","endLine":12,"endColumn":70},{"ruleId":"59","severity":1,"message":"60","line":13,"column":17,"nodeType":"61","messageId":"62","endLine":13,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":19,"column":68,"nodeType":"61","messageId":"62","endLine":19,"endColumn":70},{"ruleId":"59","severity":1,"message":"60","line":20,"column":17,"nodeType":"61","messageId":"62","endLine":20,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":26,"column":68,"nodeType":"61","messageId":"62","endLine":26,"endColumn":70},{"ruleId":"59","severity":1,"message":"60","line":27,"column":17,"nodeType":"61","messageId":"62","endLine":27,"endColumn":19},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getGrid' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'BDS', 'BFS', 'algo', 'end', 'grid', 'refarray', and 'start'. Either include them or remove the dependency array.","ArrayExpression",["72"],"React Hook useEffect has a missing dependency: 'refarray'. Either include it or remove the dependency array.",["73"],"no-redeclare","'newgrid' is already defined.","redeclared",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [BDS, BFS, algo, end, grid, refarray, run, start]",{"range":"78","text":"79"},"Update the dependencies array to be: [refarray, res]",{"range":"80","text":"81"},[4698,4703],"[BDS, BFS, algo, end, grid, refarray, run, start]",[4915,4920],"[refarray, res]"]